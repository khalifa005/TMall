@inherits CommonComponent
@using Syncfusion.Blazor.Grids
@using Application.MediatorHandlers.ProductHandlers
@using Application.AppDtos
@using Core.Entities
@implements IDisposable


@if (Products.Count > 0)
{
    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
              
                <SfGrid @ref="DefaultGrid"
                        DataSource="@Products"
                        AllowPaging="true"
                        AllowSorting="true"
                        AllowFiltering="true"
                        AllowPdfExport="true"
                        Toolbar="@(new List<string>() { "Grid_excelexport" })" AllowExcelExport="true">
                    <GridEvents OnToolbarClick="ToolbarClickHandler"  TValue="ProductAppDto"></GridEvents>
                    <GridPageSettings PageSize="5"></GridPageSettings>

                    <GridColumns>
                        <GridColumn Field="@nameof(Product.Id)"
                                    HeaderText="@L.GetText("Shop")"></GridColumn>

                        <GridColumn Field="@nameof(Product.Name)"
                                    HeaderText="@Product.Name"></GridColumn>

                        <GridColumn Field="@nameof(Product.Price)"
                                    Format="C2"></GridColumn>

                        <GridColumn Field="@nameof(Product.ProductType)"
                                    HeaderText="@Product.ProductType"></GridColumn>
                    </GridColumns>

                </SfGrid>
            </div>
        </div>
    </div>
}

@code{
    public ProductFilterUI FilterUi { get; set; } = ProductFilterUI.Default();

    public PagingInfo PagingInfo { get; set; }
    public int PageSize { get; set; } = 50;
    public int Page { get; set; } = 1;

    public List<ProductAppDto> Products { get; set; } = new();
    public ProductAppDto Product { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        GetCurrentLanguage();

        var isArabicLanguage = IsArabic();

        var filter = FilterUi.GetFilter();
        var sorter = ProductSorter.ByCreateDateDesc();

        var response = await Signal.Send(new GetProductsWithPagining.Request(filter, sorter, Page, PageSize), cancellationToken: TokenSource.Token);

        if (response.IsOK)
        {
            var test = response.TestData;
            PagingInfo = response.Data.PagingInfo;
            Products = response.Data.Items;
        }
    }

    private SfGrid<ProductAppDto> DefaultGrid;

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        ExcelExportProperties ExcelProperties = new ExcelExportProperties();
        ExcelProperties.FileName = "kahlifa products.xlsx";
        await this.DefaultGrid.ExcelExport(ExcelProperties);
        await this.DefaultGrid.PdfExport();
    }
    
    public void Dispose()
    {
        TokenSource.Cancel();
    }
}